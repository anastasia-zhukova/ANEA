["Ein Repository (englisch f\u00fcr Lager, Depot oder auch Quelle; Plural: Repositorys), auch \u2013 direkt aus dem Lateinischen entlehnt \u2013 Repositorium (Pl. Repositorien), ist ein verwaltetes Verzeichnis zur Speicherung und Beschreibung digitaler Objekte f\u00fcr ein digitales Archiv. \nBei den verwalteten Objekten kann es sich beispielsweise um Programme (Software-Repository), Publikationen (Dokumentenserver), Datenmodelle (Metadaten-Repository) oder betriebswirtschaftliche Verfahren handeln. H\u00e4ufig beinhaltet ein Repository auch Funktionen zur Versionsverwaltung der verwalteten Objekte.\n\n\n== Repository zur Versionsverwaltung ==\nBei Versionsverwaltungssystemen wie CVS, Git oder SVN werden die Quellcodedateien oder andere Dateien in einem  Repository oder Projektarchiv gehalten. Sie werden von dort \u201eausgecheckt\u201c, d. h. auf den Rechner eines Programmierers geladen. Nach der Bearbeitung werden die ge\u00e4nderten Dateien wieder in das Repository \u201eeingecheckt\u201c, wobei die Ver\u00e4nderung protokolliert wird. Die Versionsverwaltung dient der Dokumentation der Systementwicklung, erlaubt aber auch die jederzeitige Rekonstruktion von fr\u00fcheren Zust\u00e4nden der Systembeschreibung.\nEin solches Versionsverwaltungssystem erm\u00f6glicht die Zusammenarbeit von gro\u00dfen Teams an Softwareprojekten, da \u00fcber die Versionsverwaltung Unterschiede an Dateien gefunden und von einem merge-Mechanismus zusammengef\u00fcgt werden k\u00f6nnen. Somit geht keine \u00c4nderung verloren.\nEine Hauptfunktion der Versionsverwaltung ist die Versionsgeschichte, die dem Benutzer erlaubt, auf jeden von einem Benutzer \"eingechecktem\" Stand einer Datei zur\u00fcckzuspringen und diese Version zu verwenden.\n\n\n== Software-Repository ==\nHierbei enth\u00e4lt das Repository Programmpakete und zugeh\u00f6rige Metadaten, z. B. Beschreibungen der Pakete, Abh\u00e4ngigkeitsinformationen und \u00c4nderungsprotokolle. Das Installieren bzw. Aktualisieren der Software aus dem Repository \u00fcbernimmt ein Paketmanager. Daher wird in diesem Zusammenhang auch oft die deutschsprachige Bezeichnung Paketquelle benutzt. Popul\u00e4re Beispiele f\u00fcr Software-Repositorys sind CPAN oder Portable Apps.\nDieses Prinzip wird h\u00e4ufig von Linux-Distributionen verwendet, um dem Benutzer an zentraler Stelle Zugriff auf aktuelle oder getestete Software zu erm\u00f6glichen. Ein Vorteil ist, dass mit einem Update durch die Paketverwaltung sowohl das System als auch die Anwendungen aktualisiert werden und so das manuelle \u00dcberpr\u00fcfen der Aktualit\u00e4t durch Besuch der einzelnen Projektwebseiten entf\u00e4llt. Die Pflege eines Programmpakets in einem Update-Repository \u00fcbernimmt ein Paket-Maintainer, der meist aus der Community rund um die Distribution stammt und nicht in die eigentliche Entwicklung der Software involviert sein muss.\n\n\n== Metadaten-Repository ==\nBei Metadaten-Repositorien handelt es sich \u00fcblicherweise um Datenbanktabellen zur Verwaltung von Metadaten, die als Basis f\u00fcr hochintegrative Systeme dienen. In ihnen sind alle notwendigen Beschreibungen zum\nSystem selbst und zur Umwelt enthalten. Mit Hilfe von Metadaten-Repositorys k\u00f6nnen diese\nSysteme ohne Programmieraufwand flexibel auf \u00c4nderungen reagieren nach dem Motto: \u201eDefinieren statt Programmieren\u201c. Metadaten-Repositorys werden unter anderem in Data-Warehouse und EAI-Architekturen eingesetzt.\nAuch die freie Faktensammlung Wikidata kann in diesem Sinne als Repository angesehen werden.\n\n\n== CASE-Werkzeuge ==\nBei manchen Modellierungswerkzeugen (\u201eCASE\u201c = Computer-aided software engineering) dient das Repository zur Speicherung aller Projektdaten wie beispielsweise Diagrammen, Quellcode und Dokumentationen.\n\n\n== Dokumentenserver ==\nIm Umfeld von Netzpublikationen wird der Begriff Repository synonym f\u00fcr Dokumentenserver verwendet. Ein Beispiel f\u00fcr einen Dokumentenserver ist ArXiv.org.\n\n\n== Siehe auch ==\nData-Dictionary\nData-Warehouse-System\nDigitale Bibliothek\nRPM Fusion, ein Beispiel", "Die Plattdeutsche Bibliographie und Biographie (PBuB) ist eine Datenbank \u00fcber niederdeutsche B\u00fccher und Autoren. Ihr Ziel ist es, alle selbstst\u00e4ndigen Ver\u00f6ffentlichungen und ihre Autoren von 1800 bis 2000 zu erfassen und Autorenbiografien bereitzustellen. Die Eintr\u00e4ge sind in Hochdeutsch.\nVerantwortlich f\u00fcr die Datenbank ist das Institut f\u00fcr niederdeutsche Sprache in Bremen.\n\n\n== Weblinks ==\nPlattdeutsche Bibliographie und Biographie (PBuB)", "Ein Datensatz () ist (beispielsweise nach Mertens) eine Gruppe von inhaltlich zusammenh\u00e4ngenden (zu einem Objekt geh\u00f6renden) Datenfeldern, z. B. Artikelnummer und Artikelname. Datens\u00e4tze entsprechen einer logischen Struktur, die bei der Softwareentwicklung (z. B. im konzeptionellen Schema der Datenmodellierung) festgelegt wurde.In der Datenverarbeitung werden zu Datens\u00e4tzen zusammengefasste Daten in Datenbanken oder in Dateien gespeichert. Sie sind Gegenstand der Verarbeitung von Computerprogrammen und werden von diesen erzeugt, gelesen, ver\u00e4ndert und gel\u00f6scht (siehe CRUD). Bei der Eingabe wird der Inhalt von Datens\u00e4tzen oft in der Form eines Formulars dargestellt, bei der Ausgabe oder Anzeige auch in Listen\u00adform, ggf. nur mit einem Teil der Datenfelder.\nAuch nicht-elektronische Daten k\u00f6nnen zu Datens\u00e4tzen zusammengefasst sein, zum Beispiel ist eine Karteikarte in einer Kartei ein Datensatz.Neben der Bedeutung von \u201eDatensatz\u201c im engeren Sinn \u2013 als Sammlung konkreter Daten (z. B. die Adressdaten von Kunde M\u00fcller) \u2013 wird der Ausdruck im Kontext der Softwareentwicklung auch als Typbegriff bei der Deklaration von Daten verwendet; Beispiel: Datensatz \u201aAdressdaten\u2018. Abh\u00e4ngig von den dabei angewendeten Methoden, Programmiersprachen etc. werden anstelle von \u201aDatensatz\u2018 auch Termini wie Satz (englisch Record), Entit\u00e4tstyp, Klasse, Tupel, Struktur, Verbund usw. benutzt. Deren logischer Aufbau wird im Rahmen des Konzeptionellen Schemas der Datenmodellierung festgelegt.Abgrenzung: Obwohl Daten eigentlich immer als Aneinanderreihung mehrerer Datenelemente auftreten, nennt man nicht alle Erscheinungsformen von Daten \u201aDatensatz\u2018, sondern nur Datengruppierungen, die zu einem bestimmten Objekt geh\u00f6ren und die innerhalb eines Datenbestands identische Strukturen aufweisen. Die Datenfelder \u201aName\u2018, \u201aAdresse\u2018 und \u201aGeburtsdatum\u2018 k\u00f6nnten also einen Datensatz zu einer Person bilden. Nicht als Datens\u00e4tze in diesem Sinn gelten zum Beispiel: Flie\u00dftexte, Drucker- oder Video-Datenstr\u00f6me, Inhalte von ausf\u00fchrbaren Dateien, Fotodaten oder die Daten von Grafiksoftware.\n\n\n== Abweichende Bedeutung in der Statistik ==\nZusammenfassend bezeichnet der Datensatz in der Informatik \u2013 wie oben beschrieben \u2013 eine eindimensionale, strukturierte Folge von Attributen eines Elements einer \u00fcbergeordneten Menge (z. B. eine Karteikarte einer Kartei, eine  Bestellung einer Datenbank f\u00fcr Bestellungen, eine Zeile einer Adressliste).\nDagegen bezeichnet der Datensatz in der Statistik die Gesamtheit von Daten in einem bestimmten Zusammenhang. Hier ist er also gleichbedeutend mit Datenbestand (ein Satz bzw. eine Sammlung von Daten, auch aus der \u00dcbersetzung von Data Set, fr\u00fcher bei IBM f\u00fcr Datei verwendet) \u2013 beispielsweise alle in einer statistischen Erhebung ermittelten Daten oder die \u201eSteuers\u00fcnder-CD\u201c.\n\n\n== Varianten bei der Speicherung ==\nIm Allgemeinen entspricht ein Datensatz, mit den Ausdrucksmitteln von Programmiersprachen deklariert, dem Datentyp Verbund bzw. Record, ggf. innerhalb eines assoziativen Arrays. Das mathematische Modell eines Datensatzes ist ein Tupel.\nBez\u00fcglich der Speicherung von Datens\u00e4tzen lassen sich zahlreiche Unterscheidungen treffen. Zum Beispiel:\n\nSpeicherung in normalen Dateien: Hier bieten sich Alternativen wie:\nBenutzerdefinierte individuelle Datenformate und -strukturen,\nCSV-Dateien mit Feldtrennzeichen wie Strichpunkt o. \u00e4.,\nXML-Format in der Form <Feldname = Feldinhalt> und mit weiteren strukturbezogenen, textlich formulierten Informationen,\nRDF-Format f\u00fcr Internet-Informationen.\nSpeicherung in Datenbanken:\nIn relationalen Datenbanken werden Datens\u00e4tze in Tabellenform gespeichert, wobei ein Datensatz i. d. R. einer Tabellenzeile entspricht.\nSpaltenorientierte Datenbanken speichern nicht alle Datenfelder je Datensatz hintereinander, sondern f\u00fcr jedes Datenfeld die Inhalte aller Datens\u00e4tze, eine Spalte (mit all ihren Zeilen) steht hier also f\u00fcr 'Datensatz'.Im Detail ist \u201aDatensatz\u2018 jedoch kein technischer, sondern ein logischer Begriff, f\u00fcr den es zahlreiche technische Erscheinungs- und Implementierungsfomen gibt. Dabei k\u00f6nnen Datens\u00e4tze nach den folgenden Merkmalen/Eigenschaften unterschieden werden:\n\nAllgemeing\u00fcltigkeit: Verbindlich festgelegte Strukturen und Formate (wie bin\u00e4re Daten oder Text, L\u00e4nge, sonstige Regeln), z. B. f\u00fcr bestimmte Softwarel\u00f6sungen (wie beim DTA-Verfahren) vs. individuell vom Anwender definierte Formate.\nSatz-/Datenfeldl\u00e4nge: Fixe und einheitliche L\u00e4nge je Feld vs. variabel lange Felder (z. B. mit Feldtrennzeichen wie bei CSV oder mit Feldl\u00e4ngenangabe); f\u00fchrt entsprechend zu Datens\u00e4tzen mit fixer oder variabler L\u00e4nge.\nVerwendete Zeichenkodierung: Nur Textzeichen z. B. im ASCII-Code vs. andere Datentypen in einem Bin\u00e4rcode.\nFeldattribute: Nur Nettodaten vs. weitere Informationen je Feld (wie fett, unterstreichen, Schrifttyp usw., meist nicht sichtbar).\nDatensatzbegrenzung: Satzende-Kennzeichnung vs. feste Satzl\u00e4nge.\nHomogenit\u00e4t: Einheitliche vs. unterschiedliche Datenarten in derselben Datei, erkennbar z. B. durch ein Datenfeld \u201aSatzart\u2018.In Anwendungen zur Tabellenkalkulation wird ein Datensatz meist durch eine Zeile, je nach Anordnung alternativ durch eine Spalte repr\u00e4sentiert. Ein klassisches Beispiel f\u00fcr einen Datensatz ist eine Lochkarte.\nF\u00fcr elektronische Daten gilt: Sie existieren in ihrem Speichermedium als Bit-/Bytefolgen beliebiger L\u00e4nge. In dieser Datenmenge werden die einzelnen Datens\u00e4tze und Datenfelder durch meist von der Programmiersprache und/oder der Systemsoftware bereitgestellte Verfahren identifiziert und adressiert und zum Beispiel in Zeilen und Spalten dargestellt.\n\nLogische/physische Datens\u00e4tze: Auf elektronischen Datentr\u00e4gern werden in der Regel mehrere Datens\u00e4tze zu gr\u00f6\u00dferen Speichereinheiten zusammengefasst. Solche Einheiten werden je nach Computersystem unterschiedlich bezeichnet, zum Beispiel als \u201aPage\u2018 (Seite, bei vielen Datenbanksystemen) oder als Block (bei konventioneller Speicherung). In einem Computerprogramm sind der Verarbeitung des einzelnen Datensatzes Routinen vorgeschaltet (meist des Betriebssystems oder des DBMS), die das tats\u00e4chliche Lesen oder Schreiben auf dem Datentr\u00e4ger aus Optimierungsgr\u00fcnden block-/seitenweise durchf\u00fchren und den jeweils einzelnen Datensatz innerhalb des Datenblocks iterativ positionieren und zur Verarbeitung im Hauptspeicher bereitstellen.\n\n\n== Siehe auch ==\nDatenbanktabelle\n\n\n== Einzelnachweise ==", "Relationale-Datenbank-Muster sind Muster, die im Entwurf relationaler Datenbanken eingesetzt werden.\n\n\n== Grundlegende Tabellentypen ==\nReferenztabelle\nEine Referenztabelle ist eine Tabelle, die \u00fcber die Zeit relativ konstant bleibt und relativ wenige Spalten aufweist. H\u00e4ufig anzutreffen sind dabei Key-Value-Referenztabellen mit nur zwei Spalten. Als Schl\u00fcssel sollten hierbei Zeichenfolgen verwendet werden, um Joins zu vermeiden.\nMastertabelle\nEine Mastertabelle ist eine Tabelle, welche die Eigenschaften eines Objektes (Person, Adresse etc.) in getrennten Spalten ablegt. Kleine Mastertabellen sollten hierbei mit einer eindeutigen Zeichenfolge; bei gro\u00dfen Mastertabellen und Mastertabellen, deren Inhalt sich oft \u00e4ndert, sollte eine Ganzzahl als Schl\u00fcssel angelegt werden.\nTransaktionstabelle\nEine Transaktionstabelle ist eine Tabelle die Interaktionen oder Ereignisse zwischen Mastertabellen speichert. Beispielsweise eine Liste von Objekten, die ein Kunde in einen Warenkorb gelegt hat. Als Schl\u00fcssel sollten automatisch generierte Ganzzahlen verwendet werden.\nQuerverweistabelle\nEine Querverweistabelle ist eine Tabelle in der die Beziehungen zwischen Mastertabellen gespeichert werden. In Querverweistabellen werden n:n-Beziehungen in mehreren Zeilen abgebildet. Als Schl\u00fcssel sollte eine Kombination aus mehreren Spalten gew\u00e4hlt werden.\n\n\n== Erweiterte Tabellentypen ==\nBegrenzte Transaktion\nAls begrenzte Transaktion bezeichnet man eine Einschr\u00e4nkung auf einer Tabelle, die definiert welche Transaktionen wann zul\u00e4ssig sind. Dieses Muster kann eingesetzt werden um entsprechende Pr\u00fcfungen auf der Anwendungsseite zu reduzieren und um die Sicherheit der Datenbank vor falsch implementierten Anwendungen zu erh\u00f6hen.\nVerg\u00e4nglicher Prim\u00e4rschl\u00fcssel\nwerden eingesetzt, wenn sich eine Eigenschaft eines Objektes als Prim\u00e4rschl\u00fcssel anbietet (z. B. eine Kundennummer), diese sich jedoch m\u00f6glicherweise \u00e4ndert. In diesem Fall kann die entsprechende Eigenschaft zwar als Prim\u00e4rschl\u00fcssel verwendet werden, \u00c4nderungen m\u00fcssen jedoch in einer History-Tabelle protokolliert werden um auch eine nachtr\u00e4gliche Zuordnung gew\u00e4hrleisten zu k\u00f6nnen.\n\n\n== Muster f\u00fcr Fremdschl\u00fcssel ==\nFremdschl\u00fcsselbegrenzung\nbezeichnet es, wenn das L\u00f6schen eines Eintrags (Zeile) aus einer Tabelle die mit dem Eintrag verkn\u00fcpften Eintr\u00e4ge (in einer anderen Tabelle) nicht mit l\u00f6scht. Die Fremdschl\u00fcsselbegrenzung ist somit das Gegenteil der Fremdschl\u00fcsselkaskade.\nIn SQL wird eine Fremdschl\u00fcsselbegrenzung mit dem Befehl DELETE RESTRICT angesto\u00dfen. Dieses Verhalten ist bei den meisten Datenbankimplementierungen das Standardverhalten, wenn nur der Befehl DELETE alleine angegeben wird.\nFremdschl\u00fcsselkaskade\nEine Fremdschl\u00fcsselkaskade ist das Gegenteil der Fremdschl\u00fcsselbegrenzung. Beim L\u00f6schen eines Eintrags werden die mit dem Eintrag verkn\u00fcpften Eintr\u00e4ge mitgel\u00f6scht.\nIn SQL wird eine Fremdschl\u00fcsselbegrenzung mit dem Befehl DELETE CASCADE angesto\u00dfen.\nQuerverweisvalidierung\nEine Querverweisvalidierung wird eingesetzt, wenn Spalten in einer Mastertabelle eine bestimmte Relation miteinander aufweisen m\u00fcssen. Diese Relation wird in einer getrennten Querverweistabelle gespeichert. Durch die getrennte Querverweistabelle wird zwar der Ressourcenverbrauch der Datenbank erh\u00f6ht, der Einsatz ist jedoch n\u00f6tig um die G\u00fcltigkeit der Daten pr\u00fcfen zu k\u00f6nnen.\n\n\n== Sicherheitsmuster ==\nSchreibgesch\u00fctzte Lookup-Tabelle\nEine schreibgesch\u00fctzte Lookup-Tabelle ist eine Tabelle die eine Zuordnung zwischen zwei Tabellen definiert, deren Inhalt zwar allgemein abgefragt werden kann, jedoch nur von bestimmten Rollen bzw. Gruppen bearbeitet werden darf. Ein Beispiel ist die Verkn\u00fcpfung von bestimmten Produkten mit einem Rabatt.\n\n\n== Denormalisierungsmuster ==\n\nDenormalisierungsmuster erm\u00f6glichen die Denormalisierung einer Datenbank zum Zweck der Verbesserung des Laufzeitverhaltens.\n\nFetching\nBeim Fetching werden Daten aus einer Tabelle in eine andere (tempor\u00e4re) Tabelle (z. B. eine Transaktionstabelle) kopiert. Hierbei ist darauf zu achten, dass eine \u00c4nderung in der Quelltabelle nicht automatisch in die Zieltabelle \u00fcbernommen wird.\nVorweggenommene Aggregation\n\nBei der vorweggenommenen Aggregation werden Werte aus verschiedenen Quellen bereits im Voraus im Zuge einer (lang laufenden) Stapelverarbeitung berechnet und in einer weiteren Tabelle zwischengespeichert. Die Werte werden dabei nicht bei jeder Abfrage neu berechnet, sondern erst im Zuge der n\u00e4chsten Stapelverarbeitung. Der Vorteil ist, dass der Zugriff deutlich schneller ist und die Ressourcen der Datenbank geschont werden. Nachteilig wirkt sich aus, dass vor kurzem get\u00e4tigte \u00c4nderungen an in der Berechnung nicht ber\u00fccksichtigt sind.\nErweiterung\nEine Erweiterung der Tabelle liegt dann vor, wenn eine Spalte in der Tabelle durch die Berechnung aus anderen Spalten gebildet wird. Hierdurch muss die Berechnung nicht bei jeder Abfrage erneut durchgef\u00fchrt werden, sondern erst wenn sich der Eintrag \u00e4ndert.\n\n\n== Objekt-Relationale Verhaltensmuster ==\n\nTabelle pro Vererbungshierarchie\n(englisch: Single Table Inheritance) verwendet eine einzige Tabelle f\u00fcr jede Klasse, um einen Klassenbaum in einer Datenbank abzubilden.\nTabelle pro Unterklasse\n(englisch: Class Table Inheritance) verwendet eine eigene Tabelle f\u00fcr jede konkrete oder abstrakte Klasse, um einen Klassenbaum in einer Datenbank abzubilden.\nTabelle pro konkrete Klasse\n(englisch: Concrete Table Inheritance) verwendet eine eigene Tabelle f\u00fcr jede konkrete Klasse, um einen Klassenbaum in einer Datenbank abzubilden.\n\t\t\n\t\t\nsiehe auch: Relationale-Datenbank-Muster, Entwurfsmuster\n\n\n== Verteilungsmuster ==\nBei den Verteilungsmustern wird im Wesentlichen zwischen keiner Verteilung, Replikation und Fragmentierung (englisch: Sharding) unterschieden:\n\nDie Replikation nimmt dieselben Teile der Daten und kopiert diese auf mehrere Server, um eine h\u00f6here Ausfallsicherheit zu gew\u00e4hrleisten.\nDie Fragmentierung verteilt unterschiedliche Teile der Daten und verteilt diese \u00fcber mehrere Server, um eine bessere Lastenverteilung zu gew\u00e4hrleisten.Die Replikation kann hierbei mit Fragmentierung kombiniert werden. Zudem unterscheidet man bei der Replikation zwischen der Master/Slave-Replikation und der Peer-to-Peer-Replikation.\n\n\n=== Single-Server ===\n\nDas einfachste Verteilungsmuster ist keine Verteilung. Die Datenbank l\u00e4uft vollst\u00e4ndig auf einem einzelnen Server, der s\u00e4mtliche Schreib- und Lesezugriffe behandelt. Der Vorteil dieses Musters ist es, dass der Server einfach zu warten ist. Updates, Datensicherungen, Reparaturen, Upgrades etc. lassen sich bei diesem Muster zentral behandeln.Zudem m\u00fcssen Softwareentwickler keine aufw\u00e4ndige Logik implementieren um Probleme mit der Konsistenz, Verf\u00fcgbarkeit oder Partitionierung zu behandeln (siehe auch: CAP-Theorem).\nDiese Variante bietet sich auch besonders bei Graphdatenbanken an, da Latenzen durch den Zugriff von Daten \u00fcber das Netzwerk vermieden werden.\n\n\n=== Fragmentierung ===\n\nBei der Fragmentierung (englisch: Sharding) werden unterschiedliche Datenbanken bzw. voneinander unabh\u00e4ngige Teile der Datenbank auf verschiedene Server, die Shards, verteilt.Hierdurch ergibt sich eine bessere Lastverteilung. Zudem fallen bei einem Ausfall des Servers nicht alle Applikationen aus, sondern nur jene die auf die jeweiligen Daten zugreifen oder schreiben m\u00fcssen.\nDa die Lese-und-Schreibzugriffe f\u00fcr jeweils bestimmte Daten vom jeweiligen Shard alleine bearbeitet werden, ergibt sich keine Inkonsistenz der Daten.\n\n\n=== Federation ===\nAls Federation bezeichnet man einen Spezialfall der Fragmentierung, bei dem ein zentraler Server, federation root genannt, die Verteilung der einzelnen Shards automatisch bestimmt.\n\n\n=== Master/Slave-Replikation ===\nBei der Master/Slave-Replikation \u00fcbernimmt ein zentraler Server, der Master, alle Schreibzugriffe auf die Datenbank. Anschlie\u00dfend werden die \u00c4nderungen auf die anderen Server, den Slaves (Sklaven) \u00fcbermittelt. Wenn der Master-Server ausfallen sollte, kann ein Slave die Rolle des Masters \u00fcbernehmen.Da es etwas dauert, bis die \u00c4nderungen von den Slave-Servern \u00fcbernommen werden, kann es kurzzeitig zu Dateninkonsistenzen kommen.\nAlle Server erm\u00f6glichen Lesezugriffe, wodurch es bei Lesezugriffen zu einer Lastverteilung kommt. Da Schreibzugriffe jedoch zentral bearbeitet werden, stellt der Master einen Flaschenhals dar.\n\n\n=== Peer-to-Peer-Replikation ===\nBei der Peer-to-Peer-Replikation, sind alle Server \u00fcber ein Peer-to-Peer-Netzwerk verbunden. Jeder Server \u00fcbernimmt sowohl Schreib- als auch Lesezugriffe. Schreibzugriffe werden hierbei mit allen Servern synchronisiert.Da es jedoch einige Zeit dauert bis die Schreibzugriffe synchronisiert werden, kann es bei diesem Modell zu Dateninkonsistenzen kommen. Dieser Effekt tritt hier besonders zutage, wenn die Netzwerkverbindung zwischen zwei Standorten ausf\u00e4llt.\nDer Vorteil dieser Konfiguration ist, dass eine besonders hohe Ausfallsicherheit gegeben ist. Der Wegfall einzelner Peers f\u00fchrt nicht zu einem Datenverlust. Zudem ist dieses Modell leicht horizontal skalierbar, da bei Engp\u00e4ssen einfach weitere (kosteng\u00fcnstige) Rechner hinzugef\u00fcgt werden k\u00f6nnen.\nDie Peer-to-Peer-Replikation ist in der Softwareentwicklung und der Wartung (Updates, Backups etc.) besonders aufw\u00e4ndig und bedarf daher einer guten Planung seitens des Betreibers.\n\n\n=== Fragmentierung mit Master-Slave-Replikation ===\nDie Fragmentierung und Master-Slave-Replikation kann auch kombiniert werden. Hierbei werden f\u00fcr jeden Datentyp ein Master bestimmt und auf mehrere andere Server, welche hierbei dem Master als Slaves dienen, repliziert. Ein Server kann hierbei die Rolle des Masters f\u00fcr einen Datentyp und die Rolle des Slave f\u00fcr andere Datentypen gleichzeitig \u00fcbernehmen.\n\n\n=== Fragmentierung mit Peer-to-Peer-Replikation ===\nAls letzte M\u00f6glichkeit bietet sich noch die Fragmentierung eines Peer-to-Peer-Netzwerkes an. Hierbei werden mehrere Server zusammengefasst um sich als Peer-to-Peer-Netzwerk um einen bestimmten Datentyp zu k\u00fcmmern. Jeder Server kann hierbei Teil von mehreren Peer-to-Peer-Netzwerken sein und somit unterschiedliche Datentypen behandeln.\n\n\n== Weitere Muster ==\nAufl\u00f6sungsmuster\nDas Aufl\u00f6sungsmuster wird eingesetzt, wenn ein Wert aus verschiedenen Quellen kommen bzw. berechnet werden kann und entschieden werden muss, welche Quelle gew\u00e4hlt wird bzw. welches Berechnungsmodell anzuwenden ist.\nHistory-Tabelle\nEine History-Tabelle ist eine Tabelle die \u00c4nderungen protokolliert. Durch diese Tabelle sind \u00c4nderungen nachvollziehbar und der urspr\u00fcngliche Zustand der \u00fcberwachten Tabelle wiederherstellbar. Ein Beispiel f\u00fcr eine History-Tabelle ist die \u201eVersionsgeschichte\u201c der Wikipedia, in der \u00c4nderungen in Form von Diff-Elementen gespeichert werden.\nsiehe auch: Versionsverwaltung\nAbh\u00e4ngigkeitsseqenzierung\nBei einer Abh\u00e4ngigkeitsseqenzierung muss eine Reihe von Befehlen in einer Sequenz abgearbeitet werden. Da einige Befehle vom Ergebnis anderer Befehle abh\u00e4ngig sein k\u00f6nnen, muss die korrekte Reihenfolge mit Hilfe eines gerichteten Analysegraphen (englisch: directed analytic graph) ermittelt und in einer eigenen Tabelle abgebildet werden.\nSicheres Passwortr\u00fccksetzen\nDie Datenbank muss ein sicheres Zur\u00fccksetzen des Passwortes erlauben, falls der Benutzer das Passwort vergessen hat. Das Passwort darf weder im Klartext oder wiederherstellbar in der Datenbank gespeichert werden, noch darf das Passwort des Benutzers \u00fcber einen unsicheren Kanal (z. B. etwa in einer E-Mail oder eine nicht mit SSL verschl\u00fcsselte Webseite) \u00fcbermittelt werden.\n\n\n== Antimuster ==\n\nUmgekehrter Fremdschl\u00fcsselEin umgekehrter Fremdschl\u00fcssel (englisch reverse foreign key) entsteht, wenn ein bestimmter Eintrag einer Tabelle einen bestimmten Eintrag in einer anderen Tabelle verhindern soll. Ein Umgekehrter Fremdschl\u00fcssel sieht auf den ersten Blick oft wie ein Prim\u00e4rschl\u00fcssel aus.\n\n\n== Literatur ==\nScott J. Ambler, Pramodkumar J. Sadalage: Refactoring Databases: Evolutionary Database Design. Prentice Hall, Addison-Wesley, 2011, ISBN 978-0-321-77451-4, S. 384 (englisch). \nScott J. Ambler: Agile Database Techniques. John Wiley & Sons, 2003, ISBN 978-0-471-20283-7, S. 480 (englisch). \nLen Silverston: The Data Model Resource Book: Volume 1: A Library of Universal Data Models for All Enterprises. John Wiley & Sons, 2001, ISBN 978-0-471-38023-8, S. 560 (englisch). \nLen Silverston: The Data Model Resource Book: Volume 2: A Library of Universal Data Models by Industry Types. John Wiley & Sons, 2001, ISBN 978-0-471-35348-5, S. 576 (englisch). \nLen Silverston, Paul Agnew: The Data Model Resource Book: Volume 3: Universal Patterns for Data Modeling. John Wiley & Sons, 2009, ISBN 978-0-470-17845-4, S. 648 (englisch). \n\n\n== Weblinks ==\nShivprasad Koirala: 11 important database designing rules which I follow. In: The Code Project. 7. September 2012, abgerufen am 7. M\u00e4rz 2013 (englisch). \n\n\n== Einzelnachweise ==", "Eine Logdatei (auch Protokolldatei, Ereignisprotokolldatei; englisch log file) enth\u00e4lt das automatisch gef\u00fchrte Protokoll aller oder bestimmter Aktionen von Prozessen auf einem Computersystem.\nWichtige Anwendungen finden sich vor allem bei der Prozesskontrolle und Automatisierung. Prinzipiell werden alle Aktionen mitgeschrieben, die f\u00fcr eine sp\u00e4tere Untersuchung (Audit) erforderlich sind oder sein k\u00f6nnten. Der Flugschreiber in Flugzeugen ist ein Beispiel f\u00fcr kontinuierliche Protokollierung, die jedoch selten ausgewertet wird, zum Beispiel nach einem Unfall.\nIm Bereich der Datenbanken gibt es ein Transaktionsprotokoll, in der \u00c4nderungen an der Datenbank von korrekt abgeschlossenen Transaktionen (per Commit abgeschlossen) festgehalten werden, um im Fall eines Fehlers (z. B. Systemabsturz) den aktuellen Datenbestand wiederherstellen zu k\u00f6nnen.\nDas Wort Logfile wird in Teilen der Blogosph\u00e4re zunehmend auch als Begriff f\u00fcr einen Blog-Eintrag genutzt. Mit dieser Bedeutung wurde der Begriff zun\u00e4chst nur von Log-Files.de (diese Seite ist inzwischen gesperrt) verwendet, inzwischen ist er gerade bei Blogs mit reinem Tagebuch-Charakter beliebt.\n\n\n== Grundlagen ==\nAuf einem PC k\u00f6nnen Protokolldateien bestimmter Aktionen von einem oder mehreren Nutzern an einem Rechner geschrieben werden, ohne dass diese es bemerken oder ihre Arbeit beeinflusst wird. Wesentlich ist hierzu das Systemlogbuch (unter Linux meist in /var/log/messages, aber auch Windows NT und Nachfolger schreiben entsprechende Eintr\u00e4ge in eines oder mehrere Ereignisprotokolle), wenn sie entsprechend konfiguriert werden. Darin k\u00f6nnen u. a. die Anmeldungen am System protokolliert werden, aber auch andere wichtige Informationen.\nAu\u00dfer dem Betriebssystem selbst schreiben meist Hintergrundprogramme (z. B. ein E-Mail-Server, ein Proxyserver und anderes) in Logdateien, um Aktionsmeldungen, Fehlermeldungen und Hinweise persistent (dauernd) oder tempor\u00e4r verf\u00fcgbar zu halten. \u00c4hnliches gilt f\u00fcr Installationsprogramme, Firewalls, Virenscanner und dergleichen. Logdateien werden im Idealfall auf einem von der Anwendung getrennten Laufwerk gespeichert, um die I/O-Ressourcen der Anwendung nicht einzuschr\u00e4nken.Logdateien werden auch von Webservern erstellt, k\u00f6nnen aber auch au\u00dferhalb des Internets bei Untersuchungen der Benutzerfreundlichkeit von Programmen, allgemeinem Nutzerverhalten oder der Fehlersuche in einem System genutzt werden.\nDie Logdatei wird bei der Logdateianalyse untersucht.\n\n\n== Aufbau einer Protokollzeile ==\nPrinzipiell enth\u00e4lt eine Protokollzeile in einer Logdatei meist ein Ereignis sowie das dazugeh\u00f6rige Datum und die dazugeh\u00f6rige Uhrzeit als Zeitstempel. Dabei wird die Zeitangabe meist vorangestellt, da es sich bei einer Logdatei um eine chronologische Aufstellung handelt.\n\n\n=== Protokolldatei ===\nBei dem Beispiel handelt es sich um den (in der Mitte gek\u00fcrzten) Inhalt der Protokolldatei \\WINDOWS\\system32\\wbem\\Logs\\setup.log unter Windows XP; links der Zeitstempel, rechts die zu dieser Zeit ausgef\u00fchrte Aktion:\n\n(Sun Sep 13 23:02:05 2009): Beginning Wbemupgd.dll Registration\n(Sun Sep 13 23:02:05 2009): Current build of wbemupgd.dll is 5.1.2600.2180 (xpsp_sp2_rtm.040803-2158)\n(Sun Sep 13 23:02:05 2009): Beginning Core Upgrade\n(Sun Sep 13 23:02:05 2009): Beginning MOF load\n(Sun Sep 13 23:02:05 2009): Processing C:\\WINDOWS\\system32\\WBEM\\cimwin32.mof\n(Sun Sep 13 23:02:09 2009): Processing C:\\WINDOWS\\system32\\WBEM\\cimwin32.mfl\n(Sun Sep 13 23:02:12 2009): Processing C:\\WINDOWS\\system32\\WBEM\\system.mof\n(Sun Sep 13 23:02:16 2009): Processing C:\\WINDOWS\\system32\\WBEM\\evntrprv.mof\n(Sun Sep 13 23:02:16 2009): Processing C:\\WINDOWS\\system32\\WBEM\\hnetcfg.mof\n(Sun Sep 13 23:02:16 2009): Processing C:\\WINDOWS\\system32\\WBEM\\sr.mof\n(Sun Sep 13 23:02:16 2009): Processing C:\\WINDOWS\\system32\\WBEM\\dgnet.mof\n(Sun Sep 13 23:02:16 2009): Processing C:\\WINDOWS\\system32\\WBEM\\whqlprov.mof\n(Sun Sep 13 23:02:16 2009): Processing C:\\WINDOWS\\system32\\WBEM\\ieinfo5.mof\n(Sun Sep 13 23:02:17 2009): MOF load completed.\n(Sun Sep 13 23:02:17 2009): Beginning MOF load\n(Sun Sep 13 23:02:17 2009): MOF load completed.\n(Sun Sep 13 23:02:17 2009): Core Upgrade completed.\n(Sun Sep 13 23:02:17 2009): Wbemupgd.dll Service Security upgrade succeeded.\n(Sun Sep 13 23:02:17 2009): Beginning WMI(WDM) Namespace Init\n(Sun Sep 13 23:02:20 2009): WMI(WDM) Namespace Init Completed\n(Sun Sep 13 23:02:20 2009): ESS enabled\n(Sun Sep 13 23:02:20 2009): ODBC Driver <system32>\\wbemdr32.dll not present\n(Sun Sep 13 23:02:20 2009): Successfully verified WBEM OBDC adapter (incompatible version removed if it was detected).\n(Sun Sep 13 23:02:20 2009): Wbemupgd.dll Registration completed.\n(Sun Sep 13 23:02:20 2009):\n\n\n=== Serverlog ===\nEine typische Webserver-Logdatei (\u201eCombined Log Format\u201c) sieht folgenderma\u00dfen aus (Auszug mit zwei Eintr\u00e4gen):\n\n183.121.143.32 - - [18/Mar/2003:08:04:22 +0200] \"GET /images/logo.jpg HTTP/1.1\" 200 512 \"http://www.wikipedia.org/\" \"Mozilla/5.0 (X11; U; Linux i686; de-DE;rv:1.7.5)\"\n183.121.143.32 - - [18/Mar/2003:08:05:03 +0200] \"GET /images/bild.png HTTP/1.1\" 200 805 \"http://www.google.org/\"\n\u2026\n\nKann man selber auf einem Server mit der eigenen Webpr\u00e4senz keine Protokolldateien abrufen, dann erm\u00f6glichen verschiedene Webdienste (z. B. Nedstat oder W3 Statistics) das Setzen eines kleinen Z\u00e4hlers auf der eigenen Webpr\u00e4senz. Dieser Z\u00e4hler wird immer wieder beim Abrufen der Seite vom Anbieterserver geladen, wo daraufhin eine Auswertung der Zugriffe mithilfe der Zugriffs-Protokolldatei in Form von Tabellen und Grafiken erstellt wird. Hilfsmittel dabei k\u00f6nnen Z\u00e4hlpixel und HTTP-Cookies sein, wobei es letztere Internetseitenbetreibern durch das Speichern von eindeutigen Seriennummern erm\u00f6glichen, Logdateien \u00fcber einzelne zugreifende Computer \u00fcber einen l\u00e4ngeren Zeitraum zu f\u00fchren.\n\n\n== Log-Levels ==\nDa das Loggen aller Programmereignisse die f\u00fcr Logdateien verf\u00fcgbaren Ressourcen innerhalb kurzer Zeit aufbrauchen w\u00fcrde und die Auffindbarkeit bestimmter Ereignisse erschweren w\u00fcrde, werden verschiedene Dringlichkeitsstufen definiert, welche nach Bedarf ein- und ausgeschaltet werden k\u00f6nnen.\n\u00dcbliche Definition von Log-Levels:\nFatal\nFehler, welcher zur Terminierung der Anwendung f\u00fchrt.\nError\nLaufzeitfehler, welcher die Funktion der Anwendung behindert, oder unerwarteter Programmfehler.\nWarning\nAufruf einer veralteten Schnittstelle, fehlerhafter Aufruf einer Schnittstelle, Benutzerfehler oder ung\u00fcnstiger Programmzustand.\nInfo\nLaufzeitinformationen wie der Start und Stopp der Anwendung, Benutzeranmeldungen und -abmeldungen, sowie durchgef\u00fchrte Gesch\u00e4ftstransaktionen.\nDebug\nInformationen zum Programmablauf. Wird im Normalfall nur in der Entwicklung oder zur Nachvollziehung eines Fehlers verwendet.\nTrace\nDetaillierte Verfolgung des Programmablaufs, insbesondere zur Nachvollziehung eines Programmierfehlers.Wichtig ist hierbei, dass in Logdateien und -datenbanken nur Informationen zum Programmablauf und -zustand erhoben werden sollen, jedoch keine Informationen zu den Benutzern des Programms.\n\n\n== Zul\u00e4ssigkeit in Deutschland ==\n\nNach \u00a7 15 des deutschen Telemediengesetzes d\u00fcrfen Diensteanbieter personenbezogene Daten eines Nutzers nur erheben und verwenden, soweit dies erforderlich ist, um die Inanspruchnahme von Telemedien zu erm\u00f6glichen und abzurechnen. \u00dcber das Ende des Nutzungsvorgangs hinaus d\u00fcrfen Nutzungsdaten nur gespeichert werden, soweit sie f\u00fcr Zwecke der Abrechnung mit dem Nutzer erforderlich sind. Auf dieser Grundlage hat das Amtsgericht Berlin 2007 entschieden, dass die Protokollierung der IP-Adressen der Benutzer eines \u00f6ffentlich zug\u00e4nglichen Internetportals ohne deren Einwilligung unzul\u00e4ssig ist.\n\n\n== Logger ==\nLogger sind Softwarekomponenten f\u00fcr Computerprogramme, welche in eine Logdatei schreiben oder diese auslesen.\nJava\n\nLog4j.NET\n\nAwesome .NET Logging. In: Github. Abgerufen am 6. M\u00e4rz 2017 (Liste von .NET Logging-Libraries). \nEnterprise Library. In: CodePlex, patterns & practices. Microsoft, abgerufen am 11. April 2013 (englisch). \n.NET Logging Framework. The Object Guy, abgerufen am 11. April 2013 (englisch). \nSmartInspect. GurockSoftware, abgerufen am 11. April 2013 (englisch). Delphi\n\nLog4Delphi. Open Source Projekt, abgerufen am 19. September 2013 (englisch). \nnxLogging\n\n\n== Abgrenzung zu anderen Technologien ==\nIm Rahmen des Application Lifecycle Management werden, zus\u00e4tzlich zu dezentralen Logdateien, auch zentralisierte Logging-Datenbanken eingesetzt, um eine zentrale Auswertung von Programmfehlern und -informationen zu erm\u00f6glichen. Derartige Datenbanken k\u00f6nnen beispielsweise \u00fcber ein Webservice oder mittels Log-Scraping bef\u00fcllt werden.\nF\u00fcr eine Echtzeitauswertung sind Logdateien nicht geeignet. Hierf\u00fcr kommen stattdessen Monitoring-Mechanismen zum Einsatz, etwa Performance Counter und Event Tracing for Windows (ETW) auf Windows-Systemen oder\ncollectd (system statistics collection daemon) unter Linux-Systemen.\nEine weitere Technologie sind Operations-Datenbanken, welche unter anderem eine Auswertung des Zustands von Gesch\u00e4ftsprozessen erm\u00f6glicht.\n\n\n== Siehe auch ==\nVersionsverwaltung\nSyslog\nEreignisprotokoll\n\u00c4nderungsprotokoll\nRanddaten (bei der Nutzung elektronischer Infrastruktur)\nWebalizer\n\n\n== Literatur ==\nRalph Kimball, Margy Ross: The Data Webhouse Toolkit. 2. Auflage. John Wiley & Sons, New York 2002, ISBN 0-471-20024-7. \nBrij Masand: Web Usage Analysis and User Profiling. Springer, Berlin 2000, ISBN 3-540-67818-2. \nC. Lutzky, M. H. Teichmann: Logfiles in der Marktforschung: Gestaltungsoptionen f\u00fcr Analysezwecke. In: Jahrbuch der Absatz- und Verbrauchsforschung. 2002, S. 295\u2013317. \n\n\n== Weblinks ==\nSichere Log-Dateien auf Grundlage kryptographisch verketteter Eintr\u00e4ge (PDF, 515 KiB)\nEntwicklung und Test einer logfilebasierten Metrik zur Analyse von Website Entries am Beispiel einer akademischen Universit\u00e4ts-Website. Magisterarbeit zum Thema Logdateianalyse\nPantheios \u2013 Datenprotokollierungs-Bibliothek f\u00fcr C++\nEnotare \u2013 Datenprotokollierungs-Bibliothek(+Viewer) f\u00fcr C# (kostenlos)\n\n\n== Einzelnachweise ==", "Eine Objektdatenbank oder objektorientierte Datenbank ist eine Datenbank, die auf dem Objektdatenbankmodell basiert. Im Unterschied zur relationalen Datenbank werden Daten hier als Objekte im Sinne der Objektorientierung verwaltet. Das zugeh\u00f6rige Datenbankmanagementsystem wird als das objektorientierte Datenbankmanagementsystem bezeichnet. Objektdatenbank und Objektdatenbankmanagementsystem bilden gemeinsam das Objektdatenbanksystem.\nEin Objekt modelliert normalerweise einen Gegenstand oder Begriff und enth\u00e4lt insbesondere dazugeh\u00f6rige Attribute; so geh\u00f6rt zum Beispiel die Farbe und das Gewicht eines Autos zu dem Objekt Auto. Attribute beschreiben ein Objekt n\u00e4her. Daten und Methoden (die Funktionen zum Zugriff auf die Daten) werden in den Objekten zusammen abgelegt.\n\n\n== Objektdatenbankmanagementsystem ==\nDas Datenbankmanagementsystem (DBMS) ist die Software, die zur Verwaltung einer Datenbank ben\u00f6tigt wird. Im Falle einer Objektdatenbank wird diese als das Objektdatenbankmanagementsystem (ODBMS) bezeichnet. Das ODBMS ist f\u00fcr die Speicherung und den zuverl\u00e4ssigen Zugriff auf die Daten zust\u00e4ndig. Neben den klassischen Eigenschaften eines DBMS hat es folgende zus\u00e4tzliche Anforderungen zu erf\u00fcllen, um als vollwertiges ODBMS verwendbar zu sein:\n\nVerwaltung komplexer Objekte. Ein Objekt setzt sich aus beliebigen anderen Datentypen zusammen.\nSicherstellung der Objektidentit\u00e4t. Jedes Objekt bekommt eine systemweit eindeutige Identifikation OID.\nKapselung der Objekte nach dem Konzept der objektorientierten Programmierung. Der Zugriff auf das Objekt findet \u00fcber Methoden statt.\nObjekte sind einer Objektklasse zugeordnet.\nObjektklassen sind in einer Klassenhierarchie angeordnet.\nDurch sp\u00e4te Bindung werden bei vererbten Objekten die \u00fcberladenen Methoden verwendet.\nDas ODBMS muss eine Turing-vollst\u00e4ndige Manipulationssprache (DML) bereitstellen.Neben diesen Eigenschaften gibt es eine Reihe optionaler Anforderungen, die hier nicht im Einzelnen dargestellt sind. Sie wurden auf der Konferenz DOOD\u201998 festgelegt.\nAls Abfragesprache wurde von der ODMG die Sprache Object Query Language (OQL) standardisiert. Als Datenmanipulationssprache wird Object Definition Language (ODL) verwendet.\n\n\n== Vorteile ==\nObjektdatenbanksysteme schlie\u00dfen eine L\u00fccke, die bei der Programmierung moderner Datenbankanwendungen entsteht, wenn die Anwendung in einer objektorientierten Programmiersprache entwickelt wurde, die Datenbank jedoch ein klassisches relationales Datenbanksystem ist. Beide Konzepte widersprechen sich in einigen wichtigen Punkten. Dieses Problem wird allgemein als der \u201eobject-relational impedance mismatch\u201c bezeichnet. Als L\u00f6sung f\u00fcr das Problem werden sogenannte objektrelationale Abbildungen verwendet. Dies sind Softwarekomponenten, die zwischen einer relationalen Datenbank und einer objektorientierten Software vermitteln. Durch die Verwendung eines Objektdatenbanksystems wird diese Vermittlung \u00fcberfl\u00fcssig. Die Anwendung kann direkt mit der Datenbank kommunizieren.\nDas Zusammensetzen komplexer Datenobjekte mittels Joins \u00fcber mehrere Datenbanktabellen entf\u00e4llt. Objekte k\u00f6nnen einfach \u00fcber die in der Datenbank gespeicherten Beziehungen abgefragt werden.\nWeiterhin hilft ein ODBMS beim Zugriff auf Daten. Da Objekte eine komplexe Struktur haben k\u00f6nnen, sind semantische Zusammenh\u00e4nge zwischen Objekten dem Datenbanksystem bekannt. Das Datenbanksystem hat also ein Verst\u00e4ndnis davon, welche Daten zusammengeh\u00f6ren. Dieses Wissen kann bei der Abfrage der Daten mittels einer Abfragesprache wie OQL verwendet werden. Im Gegensatz zu relationalen Datenbanksystemen ist das Ergebnis einer Anfrage nicht eine Menge von Datens\u00e4tzen. OQL erlaubt die Abfrage einzelner Objekte.\nAu\u00dferdem wird das Problem der Objektidentit\u00e4t gel\u00f6st. W\u00e4hrend bei relationalen Datenbanken der Datenbankentwickler oft einen k\u00fcnstlich erzeugten Schl\u00fcssel (Surrogate Key) zu seinen Daten hinzuf\u00fcgen muss, wird dies von einem ODBMS automatisch in Form eines OIDs gemacht. Die Verwaltung dieser IDs wird dabei vollst\u00e4ndig vom System \u00fcbernommen.\n\n\n== Nachteile ==\nObjektdatenbanken haben bis heute nur eine geringe Verbreitung. Entsprechend sind viele Schnittstellen und Tools wie JDBC/ODBC, ETL oder OLAP f\u00fcr den Einsatz mit einem ODBMS nicht vorbereitet. \nDie Schnittstellen zwischen Anwendungsprogramm und Objektdatenbank sind nicht standardisiert, sodass sich bei Problemen das Datenbanksystem nur mit immensem Aufwand nachtr\u00e4glich durch ein leistungsf\u00e4higeres ersetzen l\u00e4sst. Bei den objektrelationalen Abbildungen dagegen gibt es mehrere etablierte L\u00f6sungen, die den Zugriff auf im Masseneinsatz erprobte und in unz\u00e4hligen Projekten verwendete relationale Datenbanksysteme bieten. \nBei bestimmten Anfragen sind Objektdatenbanken noch immer im Nachteil gegen\u00fcber relationalen Datenbanken. Dies ist beispielsweise durch Zugriffspfade zu Objekten \u00fcber mehrere Pfadarten (bspw. Vererbung und Assoziation) verursacht. Dies f\u00fchrt bei Schreiboperationen in der Sperrverwaltung zu einer exponentiellen Komplexit\u00e4t und somit zu Performanceproblemen. Die Leistungsprobleme wurden in den objektrelationalen Datenbanken aufgegriffen, in denen nur die Konstrukte aus objektorientierten Datenbanken mit niedrigerer Komplexit\u00e4t (bspw. \n  \n    \n      \n        n\n        \u22c5\n        log\n        \u2061\n        (\n        n\n        )\n      \n    \n    {\\displaystyle n\\cdot \\log(n)}\n  ) \u00fcbernommen wurden.\n\n\n== Geschichte ==\nObjektdatenbanken wurden Ende der 1980er Jahre entwickelt. Somit geh\u00f6ren sie zu den vergleichsweise neuen Datenbankkonzepten. Bis heute spielen sie auf dem Datenbankmarkt, der von den relationalen Datenbanksystemen dominiert wird, eine eher geringe Rolle. Dennoch sind seit 2004 mehrere Objektdatenbanksysteme wie zum Beispiel db4o entwickelt worden, die zum Teil als Open Source verf\u00fcgbar sind.\n\n\n== Siehe auch ==\nDatenbankmodell\nNetzwerkdatenbankmodell\nObjektrelationale Datenbank\nEDA-Datenbank\n\n\n== Literatur ==\nHeuer, Andreas: Objektorientierte Datenbanken \u2013 Konzepte, Modelle, Standards und Systeme. 2., aktualisierte Auflage \u2013 Bonn: Addison-Wesley-Longman 1997: ISBN 3-89319-800-8\nGunter Saake, Ingo Schmitt, Can T\u00fcrker: Objektdatenbanken \u2013 Konzepte, Sprachen, Architekturen. 1. Auflage. International Thomson Publishing, Bonn 1997, ISBN 3-8266-0258-7. \nUnland, Rainer: Objektorientierte Datenbanken. Konzepte und Modelle. Thomson Publishing, Bonn 1995, ISBN 3-929821-82-6\n\n\n== Weblinks ==\nodbms.org \u2013 Resource Portal for Education and Research on Object Databases (englisch)\nODBMS Industry Watch blog (englisch)", "Ein Dokumentenserver (auch Publikationsserver oder Repository/Repositorium) ist eine Digitale Bibliothek zur Ver\u00f6ffentlichung und Archivierung von elektronischen Publikationen in einem Repositorium. Im Gegensatz zu einer einfachen Publikation auf einer Homepage sorgt der Betreiber des Publikationsservers auch f\u00fcr die Langzeitarchivierung und Erschlie\u00dfung der publizierten Dokumente mit Hilfe von bibliographischen Metadaten. H\u00e4ufig werden Dokumenten-Server f\u00fcr Preprints verwendet.\nIn Deutschland k\u00f6nnen Dokumentenserver von der Deutschen Initiative f\u00fcr Netzwerkinformation (DINI) zertifiziert werden. Die Open Archives Initiative f\u00f6rdert die Vernetzung von Dokumentenservern durch die Etablierung von technischen Standards. Mit dem von ihr entwickelten \u201eProtocol for Metadata Harvesting\u201c (OAI-PMH) k\u00f6nnen Informationen \u00fcber die Best\u00e4nde von Dokumentenservern \u2013 sogenannte Metadaten \u2013 eingesammelt werden. Anschlie\u00dfend werden die Daten aggregiert und indexiert. Auf diese Weise lassen sich die Best\u00e4nde mehrerer Dokumentenserver \u00fcbergreifend durchsuchen. Dies ist beispielsweise mit den vertikalen Suchmaschinen BASE und OAIster m\u00f6glich.\nDie meisten deutschen Dokumentenserver sind Hochschulschriftenserver, die vor allem elektronische Dissertationen aufnehmen.\n\n\n== Softwaresysteme ==\nZum Betrieb von Dokumentenservern gibt es verschiedene Softwaresysteme, die unter anderem die Funktion einer Archivsoftware \u00fcbernehmen und gr\u00f6\u00dftenteils als Open Source verf\u00fcgbar sind:\nDSpace\nEPrints\nFedora Repository\nMyCoRe\nOPUSGreenstone\nInvenioEine \u00dcbersicht von Dokumentenservern bieten das Registry of Open Access Repositories (ROAR) und die DINI-Datenbank.\n\n\n== Beispiele ==\n\n\n=== Fachrepositorien ===\nFachrepositorien beinhalten Ver\u00f6ffentlichungen aus einem Fachgebiet oder mehreren meist benachbarten Fachgebieten.\n\nArXiv: Einer der bekanntesten Preprint-Server\nBioRxiv: Preprint-Sever f\u00fcr die Biowissenschaften\nChemRxiv: Preprint-Server f\u00fcr das Fach Chemie\nEarthArxiv: Preprint-Server f\u00fcr die Geowissenschaften\nEconStor: Open-Access-Publikationsserver f\u00fcr die Wirtschaftswissenschaften\nE-LIS: Dokumentenserver aus dem Feld der Bibliotheks- und Informationswissenschaft\nINSPIRE-HEP: Publikationsserver f\u00fcr Teilchenphysik (Invenio)\nMedRxiv: Preprint-Server f\u00fcr die Gesundheitswissenschaften\nPedocs: Dokumentenserver f\u00fcr erziehungswissenschaftliche Literatur\nPsyDok: Dokumentenserver f\u00fcr das Fach Psychologie\nPubMed Central: Dokumentenserver f\u00fcr Medizin und Biologie. In den USA muss jegliche, durch die National Institutes of Heath gef\u00f6rderte Forschung, innerhalb von zw\u00f6lf Monaten original oder als Kopie bei PMC ver\u00f6ffentlicht werden.\nSocial Science Open Access Repository: Open-Access-Dokumentenserver der Sozialwissenschaften\nSocial Science Research Network: Dokumentenserver von Elsevier\n\n\n=== Institutionelle Dokumentenserver ===\nInstitutionelle Dokumentenserver beinhalten Ver\u00f6ffentlichungen aus einer Institution, beispielsweise einer Universit\u00e4t oder einer anderen Forschungseinrichtung. Sie bieten den Autoren eine erh\u00f6hte Sichtbarkeit bzw. Findbarkeit ihrer Publikationen (z. B. \u00fcber Suchmaschinen) sowie schnellen und kostenlosen Zugang (Open Access). Au\u00dferdem garantieren institutionelle Dokumentenserver die Langzeitverf\u00fcgbarkeit der Publikationen, was bei anderen Formen der elektronischen Publikation, wie einem Upload auf soziale Medien, nicht gew\u00e4hrleistet ist.\n\nDokumenten- und Publikationsserver der HU Berlin (Humboldt-Universit\u00e4t zu Berlin)\nDuEPublico: Dokumenten- und Publikationsserver der Universit\u00e4t Duisburg-Essen (MyCoRe)\nBayerische OPUS-Server\nQucosa: S\u00e4chsischer Dokumenten und Publikationsserver\nOnline Publikationsverbund der Universit\u00e4t Stuttgart (OPUS)\nDokumenten- und Publikationsserver Speyer (DoPuS), Schriften der Deutschen Universit\u00e4t f\u00fcr Verwaltungswissenschaften Speyer und des Deutschen Forschungsinstituts f\u00fcr \u00f6ffentliche Verwaltung Speyer (F\u00d6V); im August 2017 auch 944 Volltexte\n\n\n=== Spezielle Dokumentenserver ===\nNetzpublikationen der Deutschen Nationalbibliothek: Die DNB sammelt E-Books, E-Journals, E-Paper, Hochschulschriften, Noten, H\u00f6rb\u00fccher, Digitalisate und ausgew\u00e4hlte Websites im Rahmen ihres gesetzlich verankerten Sammelauftrags.\nOpenAIRE: Netzwerk aus Repositorien, das insbesondere EU-gef\u00f6rderte Publikationen aggregiert.\n\n\n== Weblinks ==\nListe der Repositorien auf den Seiten der Deutschen Initiative f\u00fcr Netzwerkinformation e. V. (DINI)\nDiplomarbeit zu Repositorien\n\n\n== Einzelnachweise ==", "NoSQL (englisch f\u00fcr Not only SQL deutsch: \u201eNicht nur SQL\u201c) bezeichnet Datenbanken, die einen nicht-relationalen Ansatz verfolgen und damit mit der langen Geschichte relationaler Datenbanken brechen. Diese Datenspeicher ben\u00f6tigen keine festgelegten Tabellenschemata und versuchen Joins zu vermeiden. Sie skalieren dabei horizontal. Im akademischen Umfeld werden sie h\u00e4ufig als \u201estrukturierte Datenspeicher\u201c (engl. structured storage) bezeichnet.Bekannte Implementierungen sind Riak, Apache Cassandra, CouchDB, MongoDB und Redis.\n\n\n== Geschichte ==\nDer Begriff NoSQL, noch im Sinne von no SQL, wurde erstmals f\u00fcr eine 1998 erschienene einfache Open-Source-Datenbank verwendet, die keine SQL-Zugriffsm\u00f6glichkeit bereitstellte. Carlo Strozzi, der Entwickler dieser Datenbank, unterscheidet allerdings die NoSQL-Datenbank von der NoSQL-Bewegung insofern, als erstere eine Datenbank ist, welche auf die Verwendung der Sprache SQL verzichtet, w\u00e4hrend letztere ein Konzept ist, das vom relationalen Modell Abstand nimmt.Der Begriff NoSQL im Sinne von Not only SQL wurde Anfang 2009 von Johan Oskarsson f\u00fcr ein Treffen \u00fcber verteilte strukturierte Datenspeicher neu eingef\u00fchrt. Der Name war ein Versuch einer gemeinsamen Begriffsfindung f\u00fcr die wachsende Zahl an nicht relationalen, verteilten Datenspeichersystemen, die meist auch auf ACID-Eigenschaften verzichteten.\nDieses Thema ist nicht ganz neu. Die Bestrebung, Daten ohne die Einschr\u00e4nkungen des relationalen Modells zu speichern, war bereits fr\u00fcher unter dem Titel dokumentenorientierte Datenbank bekannt. Insofern sind alle Vertreter dieser Thematik auch als NoSQL-Systeme zu betrachten.\nObwohl sich NoSQL-Systeme kontinuierlich verbreiten, wird der Markt nach wie vor deutlich von relationalen Systemen dominiert (Stand 2020).\n\n\n== Architektur ==\nRelationale Datenbanken leiden \u00fcblicherweise unter Leistungsproblemen bei datenintensiven Applikationen wie Indexierung gro\u00dfer Dokumentmengen, Webseiten mit hohen Lastaufkommen sowie Streaming-Media-Applikationen. Relationale Datenbanken sind nur dann effizient, wenn sie f\u00fcr h\u00e4ufige, aber kleine Transaktionen oder f\u00fcr gro\u00dfe Batch-Transaktionen mit seltenen Schreibzugriffen optimiert sind. Sie k\u00f6nnen aber schlecht mit gleichzeitig hohen Datenanforderungen und h\u00e4ufigen Daten\u00e4nderungen umgehen. NoSQL dagegen kann mit vielen Schreib-/Leseanfragen umgehen.NoSQL-Architekturen bieten meist nur schwache Garantien hinsichtlich Konsistenz wie beispielsweise eventual consistency oder auf einzelne Datens\u00e4tze eingeschr\u00e4nkte Transaktionen. Einige Systeme unterst\u00fctzen auch ACID, beispielsweise durch Hinzuf\u00fcgung spezieller Middleware wie CloudTPS.Viele NoSQL-Implementierungen unterst\u00fctzen verteilte Datenbanken mit redundanter Datenhaltung auf vielen Servern, beispielsweise unter Nutzung einer verteilten Hashtabelle. Damit k\u00f6nnen die Systeme einfach erweitert werden sowie Ausf\u00e4lle einzelner Server \u00fcberstehen.\n\n\n== Unterscheidung nach Datenmodell ==\nNoSQL-Implementierungen k\u00f6nnen folgenderma\u00dfen gegliedert werden:\n\n\n== Leistung ==\nNach Ben Scofield kann die Leistung von NoSQL-Datenbanken wie folgt bewertet werden:\n\n\n== Literatur ==\nStefan Edlich, Achim Friedland, Jens Hampe, Benjamin Brauer, Markus Br\u00fcckner: NoSQL: Einstieg in die Welt nichtrelationaler Web 2.0 Datenbanken. 2., aktualisierte und erweiterte Auflage. Hanser Verlag, M\u00fcnchen 2011, ISBN 978-3-446-42753-2. \nPramodkumar J. Sadalage, Martin Fowler: NoSQL Distilled: A Brief Guide to the Emerging World of Polyglot Persistence. Addison-Wesley, Amsterdam 2012, ISBN 978-0-321-82662-6 (englisch). \n\n\n== Weblinks ==\nBin\u00e4rgewitter #1: NoSQL (Podcast bei RadioTux)\nNoSQL Databases (Links zu NoSQL-Themen, gepflegt durch Stefan Edlich)\nNoSQL Anwendergruppen in Deutschland\n\u00dcberblicksartikel zum Thema NoSQL (Heise online)\nStefan Edlich: Ausblick zur Entwicklung von SQL zu NoSQL. Frankfurter Datenbanktage\nRoberto V. Zicari: Free Downloads/Artikel zu NoSQL ODBMS.org\n\n\n== Einzelnachweise ==", "Als Datenbanksprache bezeichnet man formale Sprachen, die f\u00fcr den Einsatz in Datenbanksystemen entwickelt wurden. Mit Hilfe der Datenbanksprache kommuniziert ein Benutzer oder auch ein Programm mit der Datenbank, bzw. dem Datenbankmanagementsystem (DBMS). Da ein wichtiger Teil der Arbeit mit Datenbanksystemen die Formulierung von Abfragen ist, geh\u00f6rt zum Sprachumfang in der Regel auch die (Datenbank-)Abfragesprache. Datenbanksprachen sind speziell auf die Anforderungen in diesem Umfeld (Datenbankerstellung, -pflege und -abfrage) zugeschnitten. Man kann sie als Turing-vollst\u00e4ndig bezeichnen, aber es handelt sich nicht um Programmiersprachen im heute gel\u00e4ufigen Sinne \u2013 es kann keine Anwendungssoftware damit geschrieben werden.\nEs gibt eine Vielzahl von Datenbanksprachen, die oft auf bestimmte Datenbankmanagementsysteme zugeschnitten sind. Eine normierte Sprache f\u00fcr die weit verbreiteten Relationalen Datenbanksysteme (RDBMS) ist SQL, das gleichzeitig die Obermenge vieler, propriet\u00e4rer implementierter SQL-Dialekte ist. SQL selbst schreibt nicht vor, wie die Befehle implementiert werden, sondern lediglich, wie sich die Datenbank bei bestimmten Operationen nach au\u00dfen verh\u00e4lt.\n\n\n== Unterteilung relationaler Datenbanksprachen ==\n\nEine g\u00e4ngige Kategorisierung der Elemente relationaler Datenbanksprachen sind die drei Sparten DML, DDL und DCL.\n\nData Manipulation Language (DML, deutsch \u201eDatenverarbeitungssprache\u201c): Sprache oder Sprachteile f\u00fcr das Abfragen, Einf\u00fcgen, \u00c4ndern oder L\u00f6schen von Nutzdaten\nData Definition Language (DDL, deutsch \u201eDatenbeschreibungssprache\u201c): Sprache oder Sprachteile f\u00fcr das Anlegen, \u00c4ndern und L\u00f6schen von Datenstrukturen\nData Control Language (DCL, deutsch \u201eDatenaufsichtssprache\u201c): Sprache oder Sprachteile f\u00fcr die ZugriffskontrolleGelegentlich taucht in der Literatur auch eine eigene Kategorie Data Query Language (DQL) f\u00fcr die Abfrage von Daten auf. Diese Einteilung ist jedoch nicht allgemein anerkannt (siehe hierzu die Sonderstellung der Abfrage). Einen weiteren Sonderfall bilden die Sprachelemente zur Arbeit mit Transaktionen, die uneinheitlich entweder der DML, der DCL oder einer eigenen Kategorie Transaction Control Language (TCL) zugeordnet werden.\nIn SQL sind alle Elemente in einer Sprache durch unterschiedliche Anweisungen vereinigt. Beim historischen Datenbanksystem IMS gab es f\u00fcr DML und DDL eigene Sprachen (DL/I und Assembler-Makros), die DCL wurde mit Betriebssystemmitteln realisiert.\n\n\n== Unterteilung nicht-relationaler Datenbanksprachen ==\n\nAnders als im relationalen Datenbankmodell wird im Netzwerkdatenbankmodell zwischen einer Data Storage Description Language (DSDL, physische Datenbeschreibung), einer Datenbeschreibungssprache (DDL, logische Datenbeschreibung) und einer Datenmanipulationssprache (DML) unterschieden. Diese Dreiteilung basiert auf der allgemeineren ANSI-SPARC-Architektur und wurde als Standard von der Data Base Task Group vorgeschlagen, konnte sich jedoch nicht gegen das heute vorherrschende relationale Datenbankmodell durchsetzen.\nIm noch \u00e4lteren hierarchischen Datenbankmodell war keine Unterteilung in Teilsprachen standardisiert.\n\n\n== Abfragesprache versus Datenbanksprache ==\nDie Begriffe Abfragesprache und Datenbanksprache werden manchmal f\u00e4lschlicherweise synonym verwendet.\n\nEine Datenbanksprache geht in der Regel \u00fcber  das reine Abfragen hinaus.\nAbfragesprachen werden auch in Gebieten au\u00dferhalb von Datenbanksystemen verwendet.\n\n\n== Siehe auch ==\nKategorie:Datenbanksprache \u2013 Auflistung von Datenbanksprachen\n\n\n== Einzelnachweise =="]